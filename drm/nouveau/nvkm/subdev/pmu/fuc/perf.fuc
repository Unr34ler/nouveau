/*
 * Copyright 2013 Red Hat Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors: Ben Skeggs
 */

#ifdef INCLUDE_PROC
process(PROC_PERF, #perf_init, #perf_recv)
#endif

/******************************************************************************
 * PERF data segment
 *****************************************************************************/
#ifdef INCLUDE_DATA
perf_attr_start:
// parameters
perf_polling_period_us: .b32 100000

// engine usage percentage
perf_eng_gr:   .b8 0
perf_eng_vdec: .b8 0
perf_eng_mc:   .b8 0
#if NVKM_PPWR_CHIPSET >= GF100
perf_eng_pcie: .b8 0
#endif
.align 4
#endif

/******************************************************************************
 * PERF code segment
 *****************************************************************************/
#ifdef INCLUDE_CODE

// description
//
// $r15 - current (perf)
// $r14 - sender process name
// $r13 - message
// $r12 - data0
// $r11 - data1
// $r0  - zero
perf_recv:
	push $r1

	imm32($r10, PROC_HOST)
	cmp b32 $r14 $r10
	bra ne #perf_recv_not_host
		cmp b32 $r13 PERF_MSG_LOAD
		bra e #perf_load
		bra #perf_recv_exit

perf_load:
			clear b32 $r11
			clear b32 $r12
#if NVKM_PPWR_CHIPSET >= GF100
			ld(b8, $r12, #perf_eng_pcie)
			shl b32 $r12 8
#endif
			ld(b8, $r12, #perf_eng_mc)
			shl b32 $r12 8
			ld(b8, $r12, #perf_eng_vdec)
			shl b32 $r12 8
			ld(b8, $r12, #perf_eng_gr)
			call(send)
			bra #perf_recv_exit

perf_recv_not_host:
	call(perf_counter_readout)

	ld(b32, $r14, #perf_polling_period_us)
	call #ticks_from_us
	call(timer)

perf_recv_exit:
	pop $r1
	ret


// description
//
// $r15 - current (perf)
// $r0  - zero
perf_counter_readout:
	nv_iord($r14, NV_PPWR_COUNTER_COUNT(0))
	div $r14 $r14 0xff

	nv_iord($r13, NV_PPWR_COUNTER_COUNT(1))
	div $r13 $r13 $r14
	st(b8, #perf_eng_gr, $r13)

	nv_iord($r13, NV_PPWR_COUNTER_COUNT(2))
	div $r13 $r13 $r14
	st(b8, #perf_eng_vdec, $r13)

	nv_iord($r13, NV_PPWR_COUNTER_COUNT(3))
	div $r13 $r13 $r14
	st(b8, #perf_eng_mc, $r13)

#if NVKM_PPWR_CHIPSET >= GF100
	nv_iord($r13, NV_PPWR_COUNTER_COUNT(4))
	div $r13 $r13 $r14
	st(b8, #perf_eng_pcie, $r13)
#endif

	// reset the counters
	imm32($r14, NV_PPWR_COUNTER_COUNT_RESET)
	nv_iowr(NV_PPWR_COUNTER_COUNT(0), $r14)
	nv_iowr(NV_PPWR_COUNTER_COUNT(1), $r14)
	nv_iowr(NV_PPWR_COUNTER_COUNT(2), $r14)
	nv_iowr(NV_PPWR_COUNTER_COUNT(3), $r14)
#if NVKM_PPWR_CHIPSET >= GF100
	nv_iowr(NV_PPWR_COUNTER_COUNT(4), $r14)
#endif

	ret

// description
//
// $r15 - current (perf)
// $r0  - zero
perf_init:
	// set up the total ticks counter first
	imm32($r14, NV_PPWR_COUNTER_MODE_ALWAYS)
	nv_iowr(NV_PPWR_COUNTER_MODE(0), $r14)

	// set up the other counters, with fermi there are more
	imm32($r14, NV_PPWR_COUNTER_MODE_IF_NOT_ALL)
	nv_iowr(NV_PPWR_COUNTER_MODE(1), $r14)
	nv_iowr(NV_PPWR_COUNTER_MODE(2), $r14)
	nv_iowr(NV_PPWR_COUNTER_MODE(3), $r14)
#if NVKM_PPWR_CHIPSET >= GF100
	nv_iowr(NV_PPWR_COUNTER_MODE(4), $r14)
#endif

	// core load counter
	imm32($r14,
		  NV_PPWR_COUNTER_SIG_GR_IDLE
		| NV_PPWR_COUNTER_SIG_GR_GPC_IDLE
		| NV_PPWR_COUNTER_SIG_GR_ROP_IDLE
#if NVKM_PPWR_CHIPSET >= GF100
		| NV_PPWR_COUNTER_SIG_GR_HUB_IDLE
		| NV_PPWR_COUNTER_SIG_PCOPY0_IDLE
		| NV_PPWR_COUNTER_SIG_PCOPY1_IDLE
#endif
#if NVKM_PPWR_CHIPSET >= GK104
		| NV_PPWR_COUNTER_SIG_PCOPY2_IDLE
#endif
	)
	nv_iowr(NV_PPWR_COUNTER_MASK(1), $r14)

	// video load counter
	imm32($r14,
		  NV_PPWR_COUNTER_SIG_PVLD_IDLE
		| NV_PPWR_COUNTER_SIG_PPDEC_IDLE
		| NV_PPWR_COUNTER_SIG_PPPP_IDLE
#if NVKM_PPWR_CHIPSET >= GK104
		| NV_PPWR_COUNTER_SIG_PVENC
#endif
	)
	nv_iowr(NV_PPWR_COUNTER_MASK(2), $r14)

	// memory load counter
	imm32($r14,
#if NVKM_PPWR_CHIPSET >= GF100
		  NV_PPWR_COUNTER_SIG_BFB_PART0_REQ
#else
		  NV_PPWR_COUNTER_SIG_FB_PART0_REQ
#endif
	)
	nv_iowr(NV_PPWR_COUNTER_MASK(3), $r14)

	// pcie load counter
#if NVKM_PPWR_CHIPSET >= GF100
	imm32($r14, NV_PPWR_COUNTER_SIG_PCIE)
	nv_iowr(NV_PPWR_COUNTER_MASK(4), $r14)
#endif

	// initial read out
	call(perf_counter_readout)

	// schedule the next read out
	ld(b32, $r14, #perf_polling_period_us)
	call #ticks_from_us
	call(timer)

	ret
#endif
